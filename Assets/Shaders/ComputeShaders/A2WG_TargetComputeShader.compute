
#pragma kernel CSMain
#include "Util.compute"

RWStructuredBuffer<float> chunk;
float3 chunkPosition;


			uniform float3 _WorldPosition;
			float GetFBM_GetRandom( float useless , float2 st )
			{
				return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453123);
			}
			
			float GetFBM_GetCustomNoise( float useless , float2 st )
			{
					float2 i = floor(st);
					float2 f = frac(st);
					float a = GetFBM_GetRandom(0,i);
					float b = GetFBM_GetRandom(0,i + float2(1.0, 0.0));
					float c = GetFBM_GetRandom(0,i + float2(0.0, 1.0));
					float d = GetFBM_GetRandom(0,i + float2(1.0, 1.0));
					float2 u = f * f*(3.0 - 2.0*f);
					return lerp(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
			}
			
			float GetFBM( float useless , float2 pos , float baseRoughness , int octaves , float lacunarity , float persistance , float minValue , float strength , out float finalNoiseValue )
			{
				float noiseValue = 0;
					float frequency = baseRoughness;
					float amplitude = 1;
					for (int i = 0; i < octaves; i++)
					{
						float v = GetFBM_GetCustomNoise(0, pos * frequency);
						noiseValue += (v + 1) * 0.5 * amplitude;
						frequency *= lacunarity;
						amplitude *= persistance;
					}
					noiseValue = max(0, noiseValue - minValue);
					finalNoiseValue = noiseValue * strength;
					if (strength == 0)
					{
						finalNoiseValue = 0;
					}
					return finalNoiseValue;
			}
			
			float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }
			float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }
			float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }
			float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }
			float snoise( float3 v )
			{
				const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
				float3 i = floor( v + dot( v, C.yyy ) );
				float3 x0 = v - i + dot( i, C.xxx );
				float3 g = step( x0.yzx, x0.xyz );
				float3 l = 1.0 - g;
				float3 i1 = min( g.xyz, l.zxy );
				float3 i2 = max( g.xyz, l.zxy );
				float3 x1 = x0 - i1 + C.xxx;
				float3 x2 = x0 - i2 + C.yyy;
				float3 x3 = x0 - 0.5;
				i = mod3D289( i);
				float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
				float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
				float4 x_ = floor( j / 7.0 );
				float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
				float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
				float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
				float4 h = 1.0 - abs( x ) - abs( y );
				float4 b0 = float4( x.xy, y.xy );
				float4 b1 = float4( x.zw, y.zw );
				float4 s0 = floor( b0 ) * 2.0 + 1.0;
				float4 s1 = floor( b1 ) * 2.0 + 1.0;
				float4 sh = -step( h, 0.0 );
				float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
				float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
				float3 g0 = float3( a0.xy, h.x );
				float3 g1 = float3( a0.zw, h.y );
				float3 g2 = float3( a1.xy, h.z );
				float3 g3 = float3( a1.zw, h.w );
				float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
				g0 *= norm.x;
				g1 *= norm.y;
				g2 *= norm.z;
				g3 *= norm.w;
				float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
				m = m* m;
				m = m* m;
				float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
				return 42.0 * dot( m, px);
			}
			

			


float4 Evaluate(float3 _WorldPosition) 
{
    float4 finalColor;
				float3 WorldPosition30 = _WorldPosition;
				float useless1_g2 = 0.0;
				float2 temp_output_6_0_g2 = ( (WorldPosition30).xz * 0.05 );
				float2 st1_g2 = temp_output_6_0_g2;
				float localGetFBM_GetRandom1_g2 = GetFBM_GetRandom( useless1_g2 , st1_g2 );
				float useless2_g2 = localGetFBM_GetRandom1_g2;
				float2 st2_g2 = float2( 0,0 );
				float localGetFBM_GetCustomNoise2_g2 = GetFBM_GetCustomNoise( useless2_g2 , st2_g2 );
				float useless3_g2 = localGetFBM_GetCustomNoise2_g2;
				float2 pos3_g2 = temp_output_6_0_g2;
				float baseRoughness3_g2 = 0.319;
				int octaves3_g2 = 12;
				float lacunarity3_g2 = 1.793;
				float persistance3_g2 = 0.534;
				float minValue3_g2 = 1.45;
				float strength3_g2 = 20.0;
				float finalNoiseValue3_g2 = 0.0;
				float localGetFBM3_g2 = GetFBM( useless3_g2 , pos3_g2 , baseRoughness3_g2 , octaves3_g2 , lacunarity3_g2 , persistance3_g2 , minValue3_g2 , strength3_g2 , finalNoiseValue3_g2 );
				float temp_output_200_0 = ( localGetFBM3_g2 * 1.0 );
				float simplePerlin3D220 = snoise( ( WorldPosition30 * 0.01 ) );
				simplePerlin3D220 = simplePerlin3D220*0.5 + 0.5;
				float lerpResult231 = lerp( -10.0 , -100.0 , simplePerlin3D220);
				float lerpResult228 = lerp( 1.0 , simplePerlin3D220 , step( (WorldPosition30).y , lerpResult231 ));
				float4 appendResult80 = (float4(( ( ( step( (WorldPosition30).y , max( pow( temp_output_200_0 , 0.5 ) , pow( temp_output_200_0 , 2.0 ) ) ) * lerpResult228 ) * 2.0 ) - 1.0 ) , 0.0 , 0.0 , 0.0));
				
				
				finalColor = appendResult80;
				return finalColor;

}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = indexFromCoords(id);
    float4 finalColor = Evaluate(id + chunkPosition);
    float value = -1.0;
    if (finalColor.x > 0) 
    {
        value = 1.0;
    }
    chunk[index] = value;
}
